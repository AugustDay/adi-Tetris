package view;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.Timer;

import model.Board;

public final class TetrisGUI extends JPanel {

    /** Generated serial version UID. */
    private static final long serialVersionUID = -3356030126364510884L;
    
    /** The default delay (in milliseconds) for the move timer. */
    public static final int MOVE_DELAY = 800;

    /** The initial delay (in milliseconds) for the move timer. */
    public static final int INITIAL_DELAY = 1000;

    /** JFrame window which holds the content. */
    private final JFrame myWindow;
    
    /** Component to represent a menu bar at the top of the window. */
    private final JMenuBar myMenuBar;
    
    /** The timer that manages steps. */
    private final Timer myStepTimer;
    
    /** The play-zone. */
    private final Board myBoard;
    
    /** Constructor for the Tetris GUI. */
    public TetrisGUI() {
        super();
        
        myWindow = new JFrame("Tetris");
        myMenuBar = new JMenuBar();
        myBoard = new Board(10, 20);
        myStepTimer = new Timer(MOVE_DELAY, new StepListener());
        myStepTimer.setInitialDelay(INITIAL_DELAY);
    }
    
    /** Start method to create and display the GUI. */
    public void start() {
        setUpComponents();
        
        myWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myWindow.setContentPane(this);
        myWindow.pack();
        myWindow.setMinimumSize(new Dimension(myWindow.getSize()));
        myWindow.setVisible(true);
    }
    
    /** SetUp method to prepare the components of the GUI for display. */
    private void setUpComponents() {
        setLayout(new BorderLayout());
        final ClassLoader cl = this.getClass().getClassLoader();
        myWindow.setIconImage(
                 new ImageIcon(cl.getResource("resources/icon large.png")).getImage());
        
        buildMenuBar();
        myWindow.setJMenuBar(myMenuBar);
//        add(myBoard, BorderLayout.CENTER);
        final JPanel controls = new JPanel();
        
        controls.add(buildStepButton(), BorderLayout.SOUTH);
        controls.add(buildLeftButton(), BorderLayout.SOUTH);
        controls.add(buildRightButton(), BorderLayout.SOUTH);
        controls.add(buildDownButton(), BorderLayout.SOUTH);
        controls.add(buildRotateButton(), BorderLayout.SOUTH);
        controls.add(buildHardDropButton(), BorderLayout.SOUTH);
        add(controls, BorderLayout.SOUTH);
    }
    
    /** Top-level helper method to create the menu bar displayed at top of window. */
    private void buildMenuBar() {
        myMenuBar.add(buildFileMenu());
//        myMenuBar.add(buildOptionsMenu());
        myMenuBar.add(buildHelpMenu());
    }
    
    /**
     * Builds the Game menu of the menu bar.
     * @return menu with some menu items.
     */
    private JMenu buildFileMenu() { 
        final JMenu menu = new JMenu("Game");
        final JMenuItem newGame = new JMenuItem("New Game", KeyEvent.VK_N);
        final JMenuItem highScore = new JMenuItem("High Scores...", KeyEvent.VK_H);
        final JMenuItem exitItem = new JMenuItem("Exit", KeyEvent.VK_X);
        
        highScore.setEnabled(false);
        newGame.addActionListener(new ActionListener() {
            
            public void actionPerformed(final ActionEvent theEvent) {
                myStepTimer.start();
            }
        });
        
        exitItem.addActionListener(new ActionListener() {
          
            public void actionPerformed(final ActionEvent theEvent) {
                myWindow.dispatchEvent(new WindowEvent(myWindow, WindowEvent.WINDOW_CLOSING));
            }
        });
        newGame.setToolTipText("Starts a new game of Tetris.");
        highScore.setToolTipText("Displays the high scores from previous games.");
        exitItem.setToolTipText("Exits the game.");

        menu.setMnemonic(KeyEvent.VK_G);
        newGame.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.ALT_MASK));
        highScore.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, ActionEvent.ALT_MASK));
        exitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.ALT_MASK));
        
        menu.add(newGame);
        menu.addSeparator();
        menu.add(highScore);
        menu.addSeparator();
        menu.add(exitItem);
        return menu;
    }

    /**
     * Builds the Help menu for the menu bar.
     * When clicked, displays a pop-up with info about the PowerPaint program.
     * 
     * @return menu with some menu items.
     */
    private JMenu buildHelpMenu() {
        final JMenu menu = new JMenu("Help");
        final JMenuItem howToPlay = new JMenuItem("How to Play...");
        final JMenuItem aboutPopUp = new JMenuItem("Version Info...");
        
        howToPlay.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(final ActionEvent theEvent) { 
                final String message = "Stack pieces to create lines.\n"
                           + "A complete horizontal line will disappear, yielding points.\n"
                           + "Avoid stacking pieces past the top of the playzone to survive.\n"
                           + "Get extra points by stacking multiple lines at once!";
                javax.swing.JOptionPane.showMessageDialog(null, message, 
                                      "Directions", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        aboutPopUp.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(final ActionEvent theEvent) { 
                final String message = "TCSS 305 Tetris, Autumn 2015.\nBy Austin Ingraham"; 
                javax.swing.JOptionPane.showMessageDialog(null, message, 
                                      "About", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        
        howToPlay.setToolTipText("How to play Tetris.");
        aboutPopUp.setToolTipText("Information about this program.");
        
        menu.setMnemonic(KeyEvent.VK_H);
        howToPlay.setMnemonic(KeyEvent.VK_P);
        aboutPopUp.setMnemonic(KeyEvent.VK_A);
        
        howToPlay.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.ALT_MASK));
        aboutPopUp.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.ALT_MASK));
        
        menu.add(howToPlay);
        menu.add(aboutPopUp);
        
        return menu;
    }

    private JButton buildStepButton() {
        final JButton stepButton = new JButton("Step");
        stepButton.addActionListener(new ActionListener() {
            
            public void actionPerformed(final ActionEvent theEvent) { 
                myBoard.step();
                System.out.println(myBoard.toString());
            }
        });
        return stepButton;
    }
    
    private JButton buildLeftButton() {
        final JButton leftButton = new JButton("Left");
        leftButton.addActionListener(new ActionListener() {
            
            public void actionPerformed(final ActionEvent theEvent) { 
                myBoard.moveLeft();
                System.out.println(myBoard.toString());
            }
        });
        return leftButton;
    }
    
    private JButton buildRightButton() {
        final JButton rightButton = new JButton("Right");
        rightButton.addActionListener(new ActionListener() {
            
            public void actionPerformed(final ActionEvent theEvent) { 
                myBoard.moveRight();
                System.out.println(myBoard.toString());
            }
        });
        return rightButton;
    }
    
    private JButton buildDownButton() {
        final JButton downButton = new JButton("Down");
        downButton.addActionListener(new ActionListener() {
            
            public void actionPerformed(final ActionEvent theEvent) { 
                myBoard.moveDown();
                System.out.println(myBoard.toString());
            }
        });
        return downButton;
    }
    
    private JButton buildRotateButton() {
        final JButton rotateButton = new JButton("Rotate");
        rotateButton.addActionListener(new ActionListener() {
            
            public void actionPerformed(final ActionEvent theEvent) { 
                myBoard.rotate();
                System.out.println(myBoard.toString());
            }
        });
        return rotateButton;
    }
    
    private JButton buildHardDropButton() {
        final JButton hardDropButton = new JButton("Hard Drop");
        hardDropButton.addActionListener(new ActionListener() {
            
            public void actionPerformed(final ActionEvent theEvent) { 
                myBoard.hardDrop();
                System.out.println(myBoard.toString());
            }
        });
        return hardDropButton;
    }
    
    private class StepListener implements ActionListener {
            
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myBoard.step();
            System.out.println(myBoard.toString());
        }
    }
}


