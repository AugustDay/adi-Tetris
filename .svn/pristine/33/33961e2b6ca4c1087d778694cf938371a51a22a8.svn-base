package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Board;
import model.Piece;

public final class NextPieceDisplay extends JPanel implements Observer {

    /** The default width value. */
    private static final int DEFAULT_WIDTH = 80; 
    
    /** The default height value. */
    private static final int DEFAULT_HEIGHT = 80;
    
    /** The minimum size this component should be. */
    private static final Dimension MIN_SIZE = new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT);
    
    private final Board myBoard;
    
    private int mySpacing;
    
    private Piece myNextPiece;
    
    public NextPieceDisplay(final Board theBoard) {
        super();
        
        myBoard = theBoard;
        myNextPiece = myBoard.getNextPiece();

        mySpacing = myBoard.getHeight();
        setBackground(Color.black);
        setOpaque(true);
    }
    
    @Override
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setColor(Color.GREEN);
        
        if (myNextPiece != null) {
            final int[][] piece = ((AbstractPiece) myNextPiece).getRotation();
        
            for (final int[] block : piece) {
                g2d.fillRect(block[0] * mySpacing + mySpacing, -1 * block[1] * mySpacing + 70, 
                                  mySpacing, mySpacing);  
                g2d.drawRect(block[0] * mySpacing + mySpacing, -1 * block[1] * mySpacing + 70, 
                             mySpacing, mySpacing);
            }
        }
    };
    
    @Override
    public Dimension getPreferredSize() {
        return MIN_SIZE;
    }
    
    @Override
    public void update(final Observable theOberservable, final Object theObject) {
        myNextPiece = myBoard.getNextPiece();
        repaint();
    }

}
